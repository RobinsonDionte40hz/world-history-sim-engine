// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Template {
  id          String   @id @default(uuid())
  type        String
  templateId  String   @unique
  name        String
  description String?
  data        Json
  version     Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model World {
  id            String   @id @default(uuid())
  name          String
  description   String?
  config        Json
  createdAt     DateTime @default(now())
  lastSimulated DateTime?
  characters    Character[]
  relationships Relationship[]
  nodes         Node[]
  groups        Group[]
  events        HistoricalEvent[]
  questHistory  QuestHistory[]
}

model Character {
  id             String   @id @default(uuid())
  world          World    @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId        String
  characterId    String   @unique
  name           String
  birthDate      Int
  deathDate      Int?
  attributes     Json
  skills         Json
  personality    Json
  consciousness  Json?
  currentLocation String?
  createdAt      DateTime @default(now())
  relationships1 Relationship[] @relation("Character1")
  relationships2 Relationship[] @relation("Character2")
  snapshots      CharacterSnapshot[]
  questHistory   QuestHistory[]
}

model Relationship {
  id              String   @id @default(uuid())
  world           World    @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId         String
  character1      Character @relation("Character1", fields: [character1Id], references: [id])
  character1Id    String
  character2      Character @relation("Character2", fields: [character2Id], references: [id])
  character2Id    String
  relationshipType String
  strength        Float?
  startedDate     Int
  endedDate       Int?
  metadata        Json?

  @@index([character1Id, character2Id], name: "idx_relationships_characters")
}

model Node {
  id                    String   @id @default(uuid())
  world                 World    @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId               String
  nodeId                String   @unique
  name                  String
  type                  String
  position              Json
  features              Json
  resources             Json
  environmentalConditions Json?
  createdAt             DateTime @default(now())
  groups                Group[]
  events                HistoricalEvent[]
}

model Group {
  id          String   @id @default(uuid())
  world       World    @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId     String
  groupId     String   @unique
  name        String
  type        String
  foundedDate Int
  dissolvedDate Int?
  location    Node?    @relation(fields: [locationId], references: [id])
  locationId  String?
  hierarchy   Json?
  resources   Json?
  metadata    Json?
}

model HistoricalEvent {
  id          String   @id @default(uuid())
  world       World    @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId     String
  eventId     String   @unique
  timestamp   Int
  eventType   String
  description String?
  location    Node?    @relation(fields: [locationId], references: [id])
  locationId  String?
  effects     Json?
  metadata    Json?
  createdAt   DateTime @default(now())
  participants EventParticipant[]

  @@index([worldId, timestamp], name: "idx_events_world_time")
  @@index([eventType], name: "idx_events_type")
}

model EventParticipant {
  event           HistoricalEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId         String
  participantId   String
  participantType String
  role            String?

  @@id([eventId, participantId])
}

model CharacterSnapshot {
  id                String   @id @default(uuid())
  character         Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId       String
  timestamp         Int
  attributes        Json
  skills            Json
  locationId        String?
  inventory         Json?
  goals             Json?
  consciousnessState Json?

  @@index([characterId, timestamp], name: "idx_snapshots_character_time")
}

model QuestHistory {
  id            String   @id @default(uuid())
  world         World    @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId       String
  character     Character? @relation(fields: [characterId], references: [id])
  characterId   String?
  questId       String
  startedDate   Int
  completedDate Int?
  outcome       String?
  rewards       Json?
  metadata      Json?
}
